################################################################################
# 2-27-17: #####################################################################
################################################################################
• Generating controller with actions:

: Why only `new` and `edit` when we need `create` and `update` too?

    $ rails g controller PasswordResets new edit
  
: Generating controller with specific actions generates identically named views.
: Since `create` and `update` don't use own views, don't bother generating them.
  : It's more straightforward to type those actions in the controller later.

################################################################################
• Check Sendgrid automatic settings on heroku.
: First set it up:

    $ heroku addons:create sendgrid:starter

: this sets automatic user_name and password that can be seen by:

    $ heroku config:get SENDGRID_USERNAME
    $ heroku config:get SENDGRID_PASSWORD

################################################################################
• Difference between .count, .length, and .size:

: While exploring why the users_index_test :: index_lists_only_activated_users
      ...
      get users_path
      all_users = User.all.count
      assert_equal all_users, 34
      activated_users = assigns( :users )
      assert_equal activated_users.count, 33
      ...

  actually works, I learned that .count, .length and .size are not the same:
  : count will perform an SQL COUNT query
  : length will calculate the length of the resulting array
  : size will try to pick the most appropriate of the two to avoid excessive 
    queries

: http://stackoverflow.com/a/21615375/247626

################################################################################



################################################################################
# 2-23-17: #####################################################################
################################################################################
• Account activation routing.

  : Why is the account activation request routed as:
    
      GET /account_activations/:id/edit
      
      # named: edit_account_activation_url( @user.activation_token )
  
  : instead of the intuitively expected RESTful:
  
      PATCH /account_activations/:id

  : Because links in emails can only be GET
    : because there's no JS available in emails
  
• The Rails' way of setting URL query parameters (reminder):

  : to get:
  
      account_activations/q5lt38hQDc_959PVoo6b7A/edit?email=foo%40example.com
  
  : use a hash in the named route:
  
      edit_account_activation_url( @user.activation_token, email: @user.email )
  
  : Rails automatically escapes out any special characters. The resulting email 
    address will also be unescaped automatically in the controller, and will be 
    available via params[:email].
    
• Get escaped value in console:

    >> CGI.escape( "Don't panic!" )
    => "Don%27t+panic%21"

################################################################################
• Generate mailer:

  $ rails g mailer UserMailer account_activation password_reset

################################################################################
• Where do which tests go?

  : Failed users#destroy by not-logged-in or non-admin user:
    : "Following the practice ... we’ll put action-level tests of access control
      in the test/controllers/users_controller_test.rb."
   
  : Succesful users#destroy by admin user:
    : "Since the delete links appear on the users index, we’ll add these tests 
      to the test/integration/users_index_test.rb"
   
################################################################################



################################################################################
# 2-22-17: #####################################################################
################################################################################
• Bad method names, IMO, in users controller. They do not return user, they
  perform actions (redirect unless ...), so:

    def logged_in_user      => def authenticate_user
    def correct_user        => def authorize_user
    def admin_user          => def authorize_admin

################################################################################
• Hacking our site via turning an arbitrary account into admin:

      patch /users/17?admin=1
    
  : Command-line tools such as curl can issue PATCH requests.    

• Rails' strong parameters prevents this type of hacks

      params.require( :user ).permit( :name, ... ) #<= admin is not whitelisted!

  : only works, of course, when permitted params are specified (= whitelisting)
  : it's a good idea to write test for attributes that are not permitted

################################################################################
• re-seed the db, with the 1st user admin:

    $ rails db:migrate:reset
    $ rails db:seed

################################################################################
• .toggle! :: an interesting Rails way to change boolean value:

    user.admin? #=> false
    user.toggle!( :admin )
    user.admin? #=> true

################################################################################
• Testing users index page

    $ rails g integration_test users_index

################################################################################



################################################################################
# 2-21-17: #####################################################################
• Seeding db (faker used in seeds.rb):

    $ rails db:migrate:reset
    $ rails db:seed

################################################################################



################################################################################
# 2-11-17: #####################################################################
• Testing unsuccesful edits:

    $ rails g integration_test users_edit

################################################################################



################################################################################
# 2-7-17: ######################################################################
################################################################################
• Use Ruby 2.0 `keyword arguments` syntax to pass a hash of local variables 
  to partials:
  
      <%= render 'form', button_text: 'Create my account' %>

  : in favor of the old:
  
      <%= render 'form', locals: { button_text: 'Create my account' } %>

  : works out of the box, hm, will it break something unexpectadly?

################################################################################
• rel='noopener' 

: directing a link to another site to open in a new tab (target='_blank') opens 
  a minor phishing vulnerability
: implementing rel='noopener' closes that hole:
  
      <a href="http://somepl.ace" target="_blank" rel='noopener'>Lovely</a>

################################################################################
• Turn heroku production app to maintanance mode for deployment:

    $ heroku maintenance:on
    $ git push heroku
    $ heroku run rails db:migrate
    $ heroku maintenance:off

################################################################################



################################################################################
# 2-6-17: ######################################################################
################################################################################
• Finding/confirming untested areas of codebase:

: M.H: My favorite way to handle this kind of situation is to raise 
  an exception in the suspected untested block of code: 
  : if the code isn’t covered, the tests will still pass
  : if it is covered, the resulting error will identify the relevant test

################################################################################
• Revisiting BCrypt: 
  : The mysterious lines in user.rb and users_login_test.rb:
  
      BCrypt::Password.new( self.remember_digest ) == cookies_remember_token
      BCrypt::Password.new( u.remember_digest ) == cookies['remember_token']
  
  : do a lot of things ... but basically ...
  : The `==` is a sugarcoated `.password?( undigested )` meessage to
    BCrypt::Password.new( digested ) that digests the undigested for comparison
    with the digested ... yeah.
  
################################################################################
• Reading cookies in tests:

      cookies['name']
    
  : NOT the intuitive/insctinctive:
  
      cookies[:name]

  : dunno why ....

################################################################################
• test_helper.rb:
  : With all these helper method added to different files, I'm confused, 
    all tests run when is_logged_in? is moved from
    
      class ActiveSupport::TestCase
        ...
      end
  
  : to
  
      class ActionDispatch::IntegrationTest
        ...
      end
  
  : Additionally, is_logged_in? is - presently - used only in integration tests 
    which inherit from ActionDispatch::IntegrationTest. It is not used in the 
    user_test.rb at all and model tests inherit from ActiveSupport::TestCase. 
    But it works from ActiveSupport::TestCase anyway ... What's going on?

################################################################################
• Make better_errors work on cloud9:
: http://stackoverflow.com/a/39278041/247626
: http://stackoverflow.com/a/41633349/247626
: in development.rb
 
    BetterErrors::Middleware.allow_ip! '69.179.6.0/24'
    config.web_console.whitelisted_ips = '69.179.6.0/24'

  : find the present '69.179.6':
    : search env dump (@_request or @_response) for :
      HTTP_X_FORWARDED_FOR"=>"xxx.xxx.xxx.xxx"
    : or visit: http://ifconfig.me
################################################################################



################################################################################
# 2-5-17: ######################################################################
• Session helper remember( user ):
: user's logging in will be remembered in the sense that their browser will get 
  a valid remember token.
: it's defined in sessions_helper (available to controllers and views) because 
  it's the app's functionality, not user's
  : sessions an cookies are available in the app (controllers), not models
: and, to close the circle, this is why remember_token is stored (temporarily) 
  as users' virtual attribute, not just a local variable: it needs to be 
  available in sessions_helper for storage in cookies

################################################################################



################################################################################
# 2-4-17: ######################################################################
################################################################################
• Questionable logout helper:

: Michael Hartl's: 
  
    session.delete( :user_id )       <- and source of :user_id not explained!?!
                                        2-5-17: session is a file interfaced in 
                                        the Rails' app code as a hash:
                                          :user_id is a key
                                          current_user.id is its value
                                          session[:user_id] == current_user.id
                                        Delete value of a specific session key:
                                          session.delete( :key )
                                        

: Rails Guides recommended:
  
    reset_session

  : http://stackoverflow.com/a/36956785/247626
  : http://guides.rubyonrails.org/security.html#session-fixation-countermeasures

################################################################################
• Helper method names:
: keep app helper method_names different from test helper method_names:

    logged_in? vs. is_logged_in?
    
  : Ex. "I [M.H.] once had a test suite that was green even after accidentally 
    deleting the main log_in method in the Sessions helper. The reason is that 
    the tests were happily using a test helper with the same name, thereby 
    passing even though the application was completely broken."
    
    ... hm ... but, how would different help method_names prevent this?

################################################################################
• Issue with and solutio of fixtures and user passwords:
: Although we’ve defined the password_digest attribute required by 
  has_secure_password, sometimes it’s convenient to refer to the plain (virtual) 
  password, too. Unfortunately, this is impossible to arrange with fixtures, and
  adding a password attribute causes Rails to complain that there is no such 
  column in the database (which is true). We’ll make do by adopting 
  the convention that all fixture users have the same password (’password’).

################################################################################
• Reading Rails' ActiveModel::SecurePassword code:

: To use it in fixtures for the already logged in user

: Users' password digest is created using bcrypt (via has_secure_password), so
  we’ll need to create the fixture password using the same method.
  
  https://www.railstutorial.org/book/basic_login#sec-testing_layout_changes
  https://github.com/rails/rails/blob/master/activemodel/lib/active_model/secure_password.rb
  
    def password=( unencrypted_password )
      ...
        cost = ActiveModel::SecurePassword.min_cost ? 
          BCrypt::Engine::MIN_COST : 
          BCrypt::Engine.cost
        self.password_digest = BCrypt::Password.create( unencrypted_password, 
          cost: cost )
      end
    end

    : unencrypted_password is the string (password) to be hashed
    : cost determines the computational cost to calculate the hash
      ( use .min_cost for testing environment )

: Because we won’t necessarily have access to a user instance when calculating 
  the digest (e.g. in the fixtures file), we’ll attach the digest method to 
  the User class itself, making it a class method, thus available anywhere
  ( since we can invoke any class anywhere: Class.method_name; User.digest )

################################################################################
• Fixtures:
: Tests verifying changes subsequent to sucsessful user login need to log in 
  as a previously registered user, which means that such a user must already 
  exist in the database. The default Rails way to do this is to use fixtures.
: Fixtures support embedded Ruby

################################################################################
• Design aspects of current_user helper:

: Prevent repeated db hits for each occurence of an object instance while 
  processing request/response: 
  : store the object instance in a:

      @instance_variable 
  
  : it persists throughout persistance of the controler handling the object
    instance while processing the request/response

: Handle authentication User.find failure graciously:

    User.find( session[:user_id] )          <- failure raises exception
    
    User.find_by( id: session[:user_id] )   <- failure returns nil

################################################################################
• Session security:
: temporary cookies created with the session method are automatically encrypted.
  Attackers cannot use the session information to log in as the user.

################################################################################
• SessionsHelper as a module for sessions implementation:
: paraphrasing M.H.: Implementing sessions involves defining a large number of 
  related functions for use across multiple controllers and views. ... 
  Conveniently, a Sessions helper module was generated when generating 
  the Sessions controller ... by including the module into the base class of all 
  controllers - the Application controller - we arrange to make it available in 
  other controllers as well."

################################################################################
• Flash on rendered pages:
: use version of flash designed specifically for rendered pages 
  (rather than rediret_to pages):
  
    flash.now[:notice] 

################################################################################



################################################################################
# 2-3-17: ######################################################################
################################################################################
• Setting up the form for a new session:
: since we have no @session (*) to pass to form_for helper from which Rails
  would infer 1) the name for the key of params hash pointing to the nested hash 
  aggregating the form's inputs and 2) the action for the form (and the method), 
  we'll provide them explicitly:
  
    = form_for :session, url: login_path ... (method: :post is default ?)
    
  (*) class Session that includes ActiveModel::Validations would work?
      http://railscasts.com/episodes/219-active-model

################################################################################
• Piping rails routes output to grep:

    $ rails routes | grep sessions
  
: Piping to grep, grepping:
  https://www.learnenough.com/command-line-tutorial#sec-grepping

################################################################################
• Tidy up signup routing:
: replace custom route:
  
    post '/signup', to: 'users#create'
    
: with the Rails' default RESTful route:

    post '/users', to: 'users#create'     #<= implicitly generated with 
                                              resources :users

################################################################################



################################################################################
# 2-2-17: ######################################################################
################################################################################
• Testing flash caveat: "...(Even testing for the right key, much less the text, 
  is likely to be brittle, so I [Michale Hartl] prefer to test only that 
  the flash isn’t empty.)"

################################################################################
• Test invalid signup via Ruby idiomatic comparison of before and after:

    assert_no_difference 'User.count' do
      post users_path, params: { user: { name:  "",
                                         email: "user@invalid",
                                         password:              "foo",
                                         password_confirmation: "bar" } }
    end

  == 
  
    before_count = User.count
    post users_path, ...
    after_count  = User.count
    assert_equal before_count, after_count

################################################################################
• New Ruby syntax for passing hash to a method

  : traditional (< Ruby 2.0 ) syntax:
    
      def method_name( arg1, options = { arg2: defult_value } )
        ...
        var = options[:arg2]

  : Ruby 2.0 syntax (`keyword arguments`):
  
      def method_name( arg1, arg2: defult_value )
        ...
        var = arg2

################################################################################



################################################################################
# 2-1-17: ######################################################################
################################################################################
• Authentication with Rails' own `has_secure_password` declared in User:
  : Adds the following functionality to User:
    : ability to save a securely hashed .password_digest attribute to the db
    : a pair of virtual attributes:
      : 1) .password
      : 2) .password_confirmation
    : validation of .password presence and match with .password_confirmation
    : an .authenticate() method to users
      : returns the user when the password is correct 
      : returns false otherwise
  : Migrate add_passoword_digest_to_users to make it work

################################################################################
• Nicer model output in the $ rails console

    puts user.attributes.to_yaml 
    ==
    y user.attributes

################################################################################
• Rails environments: 
: test, development, and production
: Rails provides a Rails object with an env attribute and associated environment 
  boolean methods.
: The console default env is development:

    $ rails console
    Loading development environment
    >> Rails.env
    => "development"
    >> Rails.env.development?
    => true

: run in a different environment:

    $ rails console test

: similarly, but confusingly differently:

    $ rails server --environment production

    $ rails db:migrate RAILS_ENV=production
    
: preceding any of them with RAILS_ENV=<env> will also work, as in: 
  
    $ RAILS_ENV=production rails server

################################################################################
# 1-31-17: #####################################################################
• Enforcing email uniqueness in the db:
: because, in Michael Hartl's words:

  "... There’s just one small problem, which is that the Active Record 
  uniqueness validation does not guarantee uniqueness at the database level. 
  Here’s a scenario that explains why:

    1. Alice signs up for the sample app, with address alice@wonderland.com.
    2. Alice accidentally clicks on “Submit” twice, sending two requests in 
       quick succession.
    3. The following sequence occurs: request 1 creates a user in memory that 
       passes validation, request 2 does the same, request 1’s user gets saved, 
       request 2’s user gets saved.
    4. Result: two user records with the exact same email address, despite 
       the uniqueness validation
  
  If the above sequence seems implausible, believe me, it isn’t: it can 
  happen on any Rails website with significant traffic (which I once learned 
  the hard way). ..."
  
: Solution:

      $ rails g migration add_index_to_users_email
    
  : and, in the migration: 
  
      add_index :users, :email, unique: true

  : and, a callback in the model 
    
    (passing it, for simplicity, a block instead of a method name, the
    conventional, preferred way):
  
      before_save { self.email = email.downcase }
    
      ==
    
      before_save do
        self.email = email.downcase
      end

  : because: 
    
    "Some database adapters use case-sensitive indices, considering 
    the strings “Foo@ExAMPle.CoM” and “foo@example.com” to be distinct, 
    but our application treats those addresses as the same. To avoid this
    incompatibility, we’ll standardize on all lower-case addresses ..."

################################################################################



################################################################################
# 1-29-17: #####################################################################
################################################################################
• Run rails console without changing db data:

    $ rails c --sandbox

################################################################################
• Test named routes to static resources:

    $ rails g integration_test site_layout

• Test application helper methods:

    $ rails g integration_test application_helper

################################################################################



################################################################################
# 1-28-17: #####################################################################
################################################################################
• Usage of nano text editor

  http://www.howtogeek.com/howto/42980/the-beginners-guide-to-nano-the-linux-command-line-text-editor/

: to create irb (and rails console) config file simplifying prompts and 
  suppressing some annoying auto-indent behavior:

    $ nano ~/.irbrc

      IRB.conf[:PROMPT_MODE] = :SIMPLE
      IRB.conf[:AUTO_INDENT_MODE] = false
      
  : The last command to exit from the stubbornly not refusing to go away nano
    was simply ... pressing Enter  ... :)

################################################################################
• Note on the surprising use of `provide` instead of the usual `content_for`
  in the views.
: https://www.railstutorial.org/book/static_pages#cha-3_footnote-15
  
    "Experienced Rails developers might have expected the use of content_for 
    at this point, but it doesn’t work well with the asset pipeline. 
    The provide function is its replacement."

################################################################################
• Automated tests with Guard:
: https://www.railstutorial.org/book/static_pages#sec-guard

    $ bundle exec guard init

: Configure/customize Guardfile, and let Guard run (in its own terminal tab?):

    $ bundle exec guard
    
: To run all the tests, hit return/enter and the guard> prompt

    guard> [Enter]

: To exit Guard, hit Ctrl-D

: To add additional matchers to Guard, refer to the examples in Listing 3.45, 
  the Guard README, and the Guard wiki.
  
• To manually facilitate/optimize Spring usage:
  : https://www.railstutorial.org/book/static_pages#sec-guard:
  
  "The Spring server is still a little quirky as of this writing, and sometimes 
  Spring processes will accumulate and slow performance of your tests. If your 
  tests seem to be getting unusually sluggish, it’s thus a good idea to inspect
  the system processes and kill them if necessary (Box 3.4)."
  
  Box 3.4. Unix processes
  
    On Unix-like systems such as Linux and macOS, user and system tasks each 
    take place within a well-defined container called a process. To see all 
    the processes on your system, you can use the ps command with 
    the aux options:

      $ ps aux
  
    To filter the processes by type, you can run the results of ps through 
    the grep pattern-matcher using a Unix pipe |:

      $ ps aux | grep spring
      > ubuntu 12241 0.3 0.5 589960 178416 ? Ssl Sep20 1:46
      > spring app | sample_app | started 7 hours ago

    The result shown gives some details about the process, but the most 
    important thing is the first number, which is the process id, or pid. 
    To eliminate an unwanted process, use the kill command to issue 
    the Unix termination signal (which happens to be 15) to the pid:

      $ kill -15 12241

    This is the technique I recommend for killing individual processes, such as 
    a rogue Rails server (with the pid found via ps aux | grep server), but 
    sometimes it’s convenient to kill all the processes matching a particular 
    process name, such as when you want to kill all the spring processes 
    gunking up your system. In this particular case, you should first try 
    stopping the processes with the spring command itself:

      $ spring stop

    Sometimes this doesn’t work, though, and you can kill all the processes 
    with name spring using the pkill command as follows:

      $ pkill -15 -f spring

    Any time something isn’t behaving as expected or a process appears to be 
    frozen, it’s a good idea to run ps aux to see what’s going on, and then run:
  
      $ kill -15 <pid> 
    
    or 
  
      $ pkill -15 -f <name> 
    
    to clear things up.

################################################################################



################################################################################
# 1-27-17: #####################################################################
• Temporarily rename|move app layout for TDD practice purposes; interesting:

    $ mv app/views/layouts/application.html.erb layout_file
    
: and rename|move it back when needed again:

    $ mv layout_file app/views/layouts/application.html.erb

################################################################################