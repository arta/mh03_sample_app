################################################################################
# 2-3-17: ######################################################################
################################################################################
• Session security:
: temporary cookies created with the session method are automatically encrypted.
  Attackers cannot use the session information to log in as the user.

################################################################################
• SessionsHelper as a module for sessions implementation:
: paraphrasing M.H.: Implementing sessions involves defining a large number of 
  related functions for use across multiple controllers and views. ... 
  Conveniently, a Sessions helper module was generated when generating 
  the Sessions controller ... by including the module into the base class of all 
  controllers - the Application controller - we arrange to make it available in 
  other controllers as well."

################################################################################
• Flash on rendered pages:
: use version of flash designed specifically for rendered pages 
  (rather than rediret_to pages):
  
    flash.now[:notice] 

################################################################################



################################################################################
# 2-3-17: ######################################################################
################################################################################
• Setting up the form for a new session:
: since we have no @session (*) to pass to form_for helper from which Rails
  would infer 1) the name for the key of params hash pointing to the nested hash 
  aggregating the form's inputs and 2) the action for the form (and the method), 
  we'll provide them explicitly:
  
    = form_for :session, url: login_path ... (method: :post is default ?)
    
  (*) class Session that includes ActiveModel::Validations would work?
      http://railscasts.com/episodes/219-active-model

################################################################################
• Piping rails routes output to grep:

    $ rails routes | grep sessions
  
: Piping to grep, grepping:
  https://www.learnenough.com/command-line-tutorial#sec-grepping

################################################################################
• Tidy up signup routing:
: replace custom route:
  
    post '/signup', to: 'users#create'
    
: with the Rails' default RESTful route:

    post '/users', to: 'users#create'     #<= implicitly generated with 
                                              resources :users

################################################################################



################################################################################
# 2-2-17: ######################################################################
################################################################################
• Testing flash caveat: "...(Even testing for the right key, much less the text, 
  is likely to be brittle, so I [Michale Hartl] prefer to test only that 
  the flash isn’t empty.)"

################################################################################
• Test invalid signup via Ruby idiomatic comparison of before and after:

    assert_no_difference 'User.count' do
      post users_path, params: { user: { name:  "",
                                         email: "user@invalid",
                                         password:              "foo",
                                         password_confirmation: "bar" } }
    end

  == 
  
    before_count = User.count
    post users_path, ...
    after_count  = User.count
    assert_equal before_count, after_count

################################################################################
• New Ruby syntax for passing hash to a method

  : traditional (< Ruby 2.0 ) syntax:
    
      def method_name( arg1, options = { arg2: defult_value } )
        ...
        var = options[:arg2]

  : Ruby 2.0 syntax (`keyword arguments`):
  
      def method_name( arg1, arg2: defult_value )
        ...
        var = arg2

################################################################################



################################################################################
# 2-1-17: ######################################################################
################################################################################
• Nicer model output in the $ rails console

    puts user.attributes.to_yaml 
    ==
    y user.attributes

################################################################################
• Rails environments: 
: test, development, and production
: Rails provides a Rails object with an env attribute and associated environment 
  boolean methods.
: The console default env is development:

    $ rails console
    Loading development environment
    >> Rails.env
    => "development"
    >> Rails.env.development?
    => true

: run in a different environment:

    $ rails console test

: similarly, but confusingly differently:

    $ rails server --environment production

    $ rails db:migrate RAILS_ENV=production
    
: preceding any of them with RAILS_ENV=<env> will also work, as in: 
  
    $ RAILS_ENV=production rails server

################################################################################
# 1-31-17: #####################################################################
• Enforcing email uniqueness in the db:
: because, in Michael Hartl's words:

  "... There’s just one small problem, which is that the Active Record 
  uniqueness validation does not guarantee uniqueness at the database level. 
  Here’s a scenario that explains why:

    1. Alice signs up for the sample app, with address alice@wonderland.com.
    2. Alice accidentally clicks on “Submit” twice, sending two requests in 
       quick succession.
    3. The following sequence occurs: request 1 creates a user in memory that 
       passes validation, request 2 does the same, request 1’s user gets saved, 
       request 2’s user gets saved.
    4. Result: two user records with the exact same email address, despite 
       the uniqueness validation
  
  If the above sequence seems implausible, believe me, it isn’t: it can 
  happen on any Rails website with significant traffic (which I once learned 
  the hard way). ..."
  
: Solution:

      $ rails g migration add_index_to_users_email
    
  : and, in the migration: 
  
      add_index :users, :email, unique: true

  : and, a callback in the model 
    
    (passing it, for simplicity, a block instead of a method name, the
    conventional, preferred way):
  
      before_save { self.email = email.downcase }
    
      ==
    
      before_save do
        self.email = email.downcase
      end

  : because: 
    
    "Some database adapters use case-sensitive indices, considering 
    the strings “Foo@ExAMPle.CoM” and “foo@example.com” to be distinct, 
    but our application treats those addresses as the same. To avoid this
    incompatibility, we’ll standardize on all lower-case addresses ..."

################################################################################



################################################################################
# 1-29-17: #####################################################################
################################################################################
• Run rails console without changing db data:

    $ rails c --sandbox

################################################################################
• Test named routes to static resources:

    $ rails g integration_test site_layout

• Test application helper methods:

    $ rails g integration_test application_helper

################################################################################



################################################################################
# 1-28-17: #####################################################################
################################################################################
• Usage of nano text editor

  http://www.howtogeek.com/howto/42980/the-beginners-guide-to-nano-the-linux-command-line-text-editor/

: to create irb (and rails console) config file simplifying prompts and 
  suppressing some annoying auto-indent behavior:

    $ nano ~/.irbrc

      IRB.conf[:PROMPT_MODE] = :SIMPLE
      IRB.conf[:AUTO_INDENT_MODE] = false
      
  : The last command to exit from the stubbornly not refusing to go away nano
    was simply ... pressing Enter  ... :)

################################################################################
• Note on the surprising use of `provide` instead of the usual `content_for`
  in the views.
: https://www.railstutorial.org/book/static_pages#cha-3_footnote-15
  
    "Experienced Rails developers might have expected the use of content_for 
    at this point, but it doesn’t work well with the asset pipeline. 
    The provide function is its replacement."

################################################################################
• Automated tests with Guard:
: https://www.railstutorial.org/book/static_pages#sec-guard

    $ bundle exec guard init

: Configure/customize Guardfile, and let Guard run (in its own terminal tab?):

    $ bundle exec guard
    
: To run all the tests, hit return/enter and the guard> prompt

    guard> [Enter]

: To exit Guard, hit Ctrl-D

: To add additional matchers to Guard, refer to the examples in Listing 3.45, 
  the Guard README, and the Guard wiki.
  
• To manually facilitate/optimize Spring usage:
  : https://www.railstutorial.org/book/static_pages#sec-guard:
  
  "The Spring server is still a little quirky as of this writing, and sometimes 
  Spring processes will accumulate and slow performance of your tests. If your 
  tests seem to be getting unusually sluggish, it’s thus a good idea to inspect
  the system processes and kill them if necessary (Box 3.4)."
  
  Box 3.4. Unix processes
  
    On Unix-like systems such as Linux and macOS, user and system tasks each 
    take place within a well-defined container called a process. To see all 
    the processes on your system, you can use the ps command with 
    the aux options:

      $ ps aux
  
    To filter the processes by type, you can run the results of ps through 
    the grep pattern-matcher using a Unix pipe |:

      $ ps aux | grep spring
      > ubuntu 12241 0.3 0.5 589960 178416 ? Ssl Sep20 1:46
      > spring app | sample_app | started 7 hours ago

    The result shown gives some details about the process, but the most 
    important thing is the first number, which is the process id, or pid. 
    To eliminate an unwanted process, use the kill command to issue 
    the Unix termination signal (which happens to be 15) to the pid:

      $ kill -15 12241

    This is the technique I recommend for killing individual processes, such as 
    a rogue Rails server (with the pid found via ps aux | grep server), but 
    sometimes it’s convenient to kill all the processes matching a particular 
    process name, such as when you want to kill all the spring processes 
    gunking up your system. In this particular case, you should first try 
    stopping the processes with the spring command itself:

      $ spring stop

    Sometimes this doesn’t work, though, and you can kill all the processes 
    with name spring using the pkill command as follows:

      $ pkill -15 -f spring

    Any time something isn’t behaving as expected or a process appears to be 
    frozen, it’s a good idea to run ps aux to see what’s going on, and then run:
  
      $ kill -15 <pid> 
    
    or 
  
      $ pkill -15 -f <name> 
    
    to clear things up.

################################################################################



################################################################################
# 1-27-17: #####################################################################
• Temporarily rename|move app layout for TDD practice purposes; interesting:

    $ mv app/views/layouts/application.html.erb layout_file
    
: and rename|move it back when needed again:

    $ mv layout_file app/views/layouts/application.html.erb

################################################################################